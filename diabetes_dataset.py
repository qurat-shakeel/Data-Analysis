# -*- coding: utf-8 -*-
"""Diabetes_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ifIuUTrRR1azHQJNuYEBxfHq6d5NWe8M
"""

import pandas as pd


df = pd.read_csv('diabetes.csv')


print(df.head())

# Get the number of records
num_records = df.shape[0]

print("Number of records in the Pima Indian Diabetes Dataset:", num_records)

# Calculate the maximum age
max_age = df['Age'].max()

print("Maximum age of records in the Pima Indian Diabetes Dataset:", max_age)

# Calculate the number of missing values in the "pregnancies" column
missing_pregnancies = df['Pregnancies'].isnull().sum()

# Display the number of missing values in the "pregnancies" column
print("Missing values in the 'pregnancies' column:", missing_pregnancies)

# Calculate the number of missing values in the "Glucose" column
missing_Glucose = df['Glucose'].isnull().sum()

# Display the number of missing values in the "Glucose" column
print("Missing values in the 'Glucose' column:", missing_Glucose)

# Calculate the number of missing values in the "Blood Pressure" column
missing_BloodPressure = df['BloodPressure'].isnull().sum()

# Display the number of missing values in the "Blood Pressure" column
print("Missing values in the 'Blood Pressure' column:", missing_BloodPressure)

# Calculate the number of missing values in the "Skin Thickness" column
missing_SkinThickness = df['SkinThickness'].isnull().sum()

# Display the number of missing values in the "SkinThickness" column
print("Missing values in the 'SkinThickness' column:", missing_SkinThickness)

# Calculate the number of missing values in the "Insulin" column
missing_Insulin = df['Insulin'].isnull().sum()

# Display the number of missing values in the "Inslin" column
print("Missing values in the 'Insulin' column:", missing_Insulin)

# Calculate the number of missing values in the "BMI" column
missing_BMI = df['BMI'].isnull().sum()

# Display the number of missing values in the "BMI" column
print("Missing values in the 'BMI' column:", missing_BMI)

# Calculate the number of missing values in the "DiabetesPedigreeFunction" column
missing_DiabetesPedigreeFunction = df['DiabetesPedigreeFunction'].isnull().sum()

# Display the number of missing values in the "DiabetesPedigreeFunction" column
print("Missing values in the 'DiabetesPedigreeFunction' column:", missing_DiabetesPedigreeFunction)

# Calculate the number of missing values in the "Age" column
missing_Age = df['Age'].isnull().sum()

# Display the number of missing values in the "Age" column
print("Missing values in the 'Age' column:", missing_Age)

# Calculate the number of missing values in the "Outcome" column
missing_Outcome = df['Outcome'].isnull().sum()

# Display the number of missing values in the "Outcome" column
print("Missing values in the 'Outcome' column:", missing_Outcome)

import numpy as np
# Replace zero values with NaN
df.replace(0, np.nan, inplace=True)

# Now, all zero values in the DataFrame have been replaced with NaN

# Calculate the total number of NaN values
total_nan_values = df.isna().sum().sum()
print("Total NaN values in the dataset:", total_nan_values)

# Calculate the number of NaN values in each column
nan_values_per_column = df.isna().sum()
print("NaN values in each column:")
print(nan_values_per_column)

age_groups_positive = diabetes_positive.groupby(pd.cut(diabetes_positive['Age'], bins=range(0, 101, 10))).size()

age_groups_negative = diabetes_negative.groupby(pd.cut(diabetes_negative['Age'], bins=range(0, 101, 10))).size()

# Split the dataset into individuals with and without diabetes
diabetes_positive = df[df['Outcome'] == 1]
diabetes_negative = df[df['Outcome'] == 0]

# Calculate the proportion of individuals with diabetes for each age group
age_groups_positive = diabetes_positive.groupby(pd.cut(diabetes_positive['Age'], bins=range(0, 101, 10))).size()
age_groups_negative = diabetes_negative.groupby(pd.cut(diabetes_negative['Age'], bins=range(0, 101, 10))).size()

# Combine the counts of individuals with and without diabetes for each age group
age_groups_combined = pd.concat([age_groups_positive, age_groups_negative], axis=1)
age_groups_combined.columns = ['Diabetes Positive', 'Diabetes Negative']

# Calculate the proportion of individuals with diabetes for each age group
age_groups_combined['Diabetes Proportion'] = age_groups_combined['Diabetes Positive'] / (age_groups_combined['Diabetes Positive'] + age_groups_combined['Diabetes Negative'])

# Find the age group with the highest proportion of individuals with diabetes
max_prone_age_group = age_groups_combined['Diabetes Proportion'].idxmax()

print("Age group most prone to diabetes:", max_prone_age_group)