# -*- coding: utf-8 -*-
"""Practice28March.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wCs6up2YyteLCNriRr9eCLVlStD4iq2X
"""

import pandas as pd
data = pd.read_csv('train.csv')
data

# total fare
total_fare = data['Fare'].sum()
print(f"The total fare of all passengers is : {total_fare}")

# calculate fare for pclass 1
pclass1_df =data[data['Pclass'] ==1]
pclass1_fare = pclass1_df['Fare'].sum()
print(f"The total fare of passengers in Pclass 1 is: {pclass1_fare}")

# calculate fare for pclass 2
pclass2_df =data[data['Pclass'] ==2]
pclass2_fare = pclass2_df['Fare'].sum()
print(f"The total fare of passengers in Pclass 2 is: {pclass2_fare}")



#calculate fare for pclass 3
pclass3_df =data[data['Pclass'] ==3]
pclass3_fare = pclass3_df['Fare'].sum()
print(f"The total fare of passengers in Pclass 3 is: {pclass3_fare}")

import pandas as pd
# filter the dataframe to include only Pclass = 1
desired_class = 1
filtered_df = data[data['Pclass'] == desired_class]

# calculate the average fare for pclass 1
avg_fare = filtered_df['Fare'].mean()
print(f" The average fare for Pclass {desired_class} is : {avg_fare}')

desired_class = 2
filtered_df = data[data['Pclass'] == desired_class]

# calculate the average fare for pclass 2
avg_fare = filtered_df['Fare'].mean()
print(f" The average fare for Pclass {desired_class} is : {avg_fare}")

desired_class = 3
filtered_df = data[data['Pclass'] == desired_class]

# calculate the average fare for pclass 3
avg_fare = filtered_df['Fare'].mean()
print(f" The average fare for Pclass {desired_class} is : {avg_fare}")

# plot a pie chart
import pandas as pd
import matplotlib.pyplot as plt
fare_by_pclass = data.groupby('Pclass')['Fare'].sum()
custom_colors = ['grey','pink','skyblue']
plt.figure(figsize=(8,6))
plt.pie(fare_by_pclass,colors=custom_colors, labels = fare_by_pclass.index,autopct='%1.1f%%',startangle=140)
plt.title('Fare distribution by Passenger Class')
plt.axis('equal')
plt.show()

# calculate passengers in pclass 1
pclass1_passengers = data[data['Pclass'] == 1]
num_pclass1_passengers = pclass1_passengers.shape[0]
print(f"The total number of passengers from pclass1 is: {num_pclass1_passengers}")



# calculate survivors of pclass 1
pclass1_survivors = data[(data['Pclass'] == 1) & (data['Survived'] == 1)]
num_pclass1_survivors = pclass1_survivors.shape[0]
print(f"The number of survivors in Pclass 1 is : {num_pclass1_survivors}")

# calculate passengers in pclass 2
pclass2_passengers = data[data['Pclass'] == 2]
num_pclass2_passengers = pclass2_passengers.shape[0]
print(f"The total number of passengers from pclass2 is: {num_pclass2_passengers}")

# calculate survivors of pclass 2
pclass2_survivors = data[(data['Pclass'] == 2) & (data['Survived'] == 1)]
num_pclass2_survivors = pclass2_survivors.shape[0]
print(f"The number of survivors in Pclass 2 is : {num_pclass2_survivors}")

# calculate passengers in pclass 3
pclass3_passengers = data[data['Pclass'] == 3]
num_pclass3_passengers = pclass3_passengers.shape[0]
print(f"The total number of passengers from pclass3 is: {num_pclass3_passengers}")

# calculate survivors of pclass 3
pclass3_survivors = data[(data['Pclass'] == 3) & (data['Survived'] == 1)]
num_pclass3_survivors = pclass3_survivors.shape[0]
print(f"The number of survivors in Pclass 3 is : {num_pclass3_survivors}")

# double bar graph
survivors_by_pclass = data.groupby(['Pclass','Survived']).size().unstack()

survivors_by_pclass.plot(kind='bar', stacked=False, color=['grey','skyblue'])
plt.xlabel('Passenger Class')
plt.ylabel('Number of Passenger')
plt.title('Survivors by Passenger Class')
plt.legend(['not Survived','Survived'])
plt.xticks(rotation =0)
plt.show()